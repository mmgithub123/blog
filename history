 

Linux基础知识之history的详细说明

背景：history是Linux中常会用到内容，在工作中一些用户会突然发现其安装不了某个软件，于是寻求运维人员的帮助，而不给你说明他到底做了哪些坑爹的操作。此时你第一件要做的就是要查看其history命令历史。查看后兴许你就会发现他到底干了什么坑爹的操作。

history可以让你在一定情况下快速定位问题所在。

 

本文的history介绍及其实践都是来自CentOS7.2环境

[root@localhost ~]# cat /etc/RedHat-release  

CentOS Linux release 7.2.1511 (Core)

 

history的介绍

history是shell的内置命令，其内容在系统默认的shell的man手册中。

history是显示在终端输入并执行的过命令，系统默认保留1000条。

[root@localhost ~]# history 

    1 ls

    2 vi /etc/sysconfig/network-scripts/ifcfg-eno16777728 

    3 service network restart 

    4 ifconfig

    5 ping www.linuxidc.com 

    6 systemctl disable firewalld.service  

    7 systemctl stop firewalld.service  

    8 exit

    9 ls

  10 type which

  11 which ls

  12 file /usr/bin/ls

  13 which clock 

  14 file /usr/sbin/clock

  15 man which

  16 man what 

  17 man who

  18 who

  19 man who

  20 man w 

  21 man who

  22 who -q 

  23 man w 

  ... 

  .. 

  .

 

系统在关闭后会将现有history内容保存在文件~/.bash_history

 

  与history相关的环境变量

HISTFILE 指定存放历史文件位置，默认位置在~/.bash_profile（针对用户）、 

      /etc/profile(针对全局，如果~/.bash_profile内没有相关环境变量内容则使用全局变量设置) 

HISTFILESIZE 命令历史文件记录历史的条数 

HISTSIZE 命令历史记录的条数，默认为1000 

HISTTIMEFORMAT="%F %T" 显示命令发生的时间 

HISTIGNORE="str1:str2:..." 忽略string1,string2历史 

HISTCONTROL 包含一下4项，让哪一项生效只需要让其=下面一项即可 

ignoredups: 忽略重复的命令；连续且相同方为“重复” 

ignorespace: 忽略所有以空白开头的命令 

ignoreboth:ignoredups,ignorespace 

erasedups: 删除重复命令

 

让上述环境变量生效方式：

1、直接在当前shell内输入相关变量，比如我们不想留存命令历史，我们把HISTSIZE设置为0

[root@localhost ~]# HISTSIZE=0 

[root@localhost ~]# history

 

经测试，成功。不过这种设置的局限性是其作用范围仅仅针对当前shell及其子shell，如果切换用户或登出再登入其设置失效。不过其特点是设置完立刻生效。

下面通过实验说明这个问题

[root@localhost ~]# bash 

[root@localhost ~]# history 

[root@localhost ~]# history

 

以上结果说明在当前shell内设置history的环境变量后，其作用范围为当前shell及子shell

Last login: Fri Jul 29 17:26:41 2016 from 10.1.250.62 

[root@localhost ~]# history 

    1 history

 

重新登陆后原有的history环境变量失效

2、另一种让history环境变量生效的方式是修改~/.bash_profile文件

[root@localhost ~]# vi ~/.bash_profile  

# .bash_profile 

  

# Get the aliases and functions 

if [ -f ~/.bashrc ]; then

        . ~/.bashrc 

fi

  

# User specific environment and startup programs 

  

PATH=$PATH:$HOME/bin

HISTTIMEFORMAT="%F %T " 此为新添加的history环境变量，我添加了发生命令操作的时间 

export PATH

 

wq保存退出。

[root@localhost ~]# history            

    1 history

    2 ll 

    3 cd

    4 hostory 

    5 history

    6 vi ~/.bash_profile  

    7 history

 

由结果可知变量并没有生效，我们重新登录再尝试下。

[root@localhost ~]# history 

    1 2016-07-29 20:00:29 history

    2 2016-07-29 20:00:29 ll 

    3 2016-07-29 20:00:29 cd

    4 2016-07-29 20:00:29 hostory 

    5 2016-07-29 20:00:29 history

    6 2016-07-29 20:00:29 vi ~/.bash_profile  

    7 2016-07-29 20:00:29 history

    8 2016-07-29 20:00:29 logout

    9 2016-07-29 20:00:33 history

 

通过上面的两个结果，我们可以发现第二种修改配置文件虽然也可以成功修改history环境变量但是其生效需要重新登陆，并不是改完就生效。但是它的特点是此修改始终有效，时效性为永久。

 

  history命令的使用

-c: 清空命令历史

-d n: 删除历史中指定的命令，n表示命令号

#: 显示最近的#条历史

-a: 追加本次会话新执行的命令历史列表至历史文件，因为多终端所以如果想看当前都发生了什么操作就可以执行-a进行查看

-n: 读历史文件（本地数据）中未读过的行到历史列表（内存数据）

-r: 读历史文件（本地数据）附加到历史列表（内存数据）

-w: 保存历史列表（内存数据）到指定的历史文件（本地数据）

-s: 展开历史参数成一行，附加在历史列表后。用于伪造命令历史

下面来演示上面几种命令的使用

[root@localhost ~]# history 

    1 2016-07-29 20:00:29 history

    2 2016-07-29 20:00:29 ll 

    3 2016-07-29 20:00:29 cd

    4 2016-07-29 20:00:29 hostory 

    5 2016-07-29 20:00:29 history

    6 2016-07-29 20:00:29 vi ~/.bash_profile  

    7 2016-07-29 20:00:29 history

    8 2016-07-29 20:00:29 logout

    9 2016-07-29 20:00:33 history

  10 2016-07-29 20:07:41 cd

  11 2016-07-29 20:07:44 ls

  12 2016-07-29 20:07:50 history

  13 2016-07-29 20:08:12 cat /etc/profile

  14 2016-07-29 20:12:10 HISTCONTROL=ignorespace 

  15 2016-07-29 20:27:28 history -p 

  16 2016-07-29 20:27:31 history

  17 2016-07-29 20:28:10 ls /etc

  18 2016-07-29 20:28:14 history

  19 2016-07-29 20:28:57 history

 

清空历史

[root@localhost ~]# history -c 

[root@localhost ~]# history 

2016-07-29 20:29:26 history

 

从历史文件读取之前的命令历史

[root@localhost ~]# history -r  

[root@localhost ~]# history 

    1 2016-07-29 20:29:26 history

    2 2016-07-29 20:30:59 history -r  

    3 2016-07-29 20:30:59 history

    4 2016-07-29 20:30:59 ll 

    5 2016-07-29 20:30:59 cd

    6 2016-07-29 20:30:59 hostory 

    7 2016-07-29 20:30:59 history

    8 2016-07-29 20:30:59 vi ~/.bash_profile  

    9 2016-07-29 20:30:59 history

  10 2016-07-29 20:30:59 logout

  11 2016-07-29 20:31:01 history

 

删除指定命令历史

[root@localhost ~]# history -d 4 

[root@localhost ~]# history 

    1 2016-07-29 20:29:26 history

    2 2016-07-29 20:30:59 history -r  

    3 2016-07-29 20:30:59 history

    4 2016-07-29 20:30:59 cd

    5 2016-07-29 20:30:59 hostory 

    6 2016-07-29 20:30:59 history

    7 2016-07-29 20:30:59 vi ~/.bash_profile  

    8 2016-07-29 20:30:59 history

    9 2016-07-29 20:30:59 logout

  10 2016-07-29 20:31:01 history

  11 2016-07-29 20:32:50 history -d 4 

  12 2016-07-29 20:32:52 history

 

伪造历史命令

12345678910111213141516 [root@localhost ~]# history -s rm -rf /* 做下恶作剧 

[root@localhost ~]# history 

    1 2016-07-29 20:29:26 history

    2 2016-07-29 20:30:59 history -r  

    3 2016-07-29 20:30:59 history

    4 2016-07-29 20:30:59 cd

    5 2016-07-29 20:30:59 hostory 

    6 2016-07-29 20:30:59 history

    7 2016-07-29 20:30:59 vi ~/.bash_profile  

    8 2016-07-29 20:30:59 history

    9 2016-07-29 20:30:59 logout

  10 2016-07-29 20:31:01 history

  11 2016-07-29 20:32:50 history -d 4 

  12 2016-07-29 20:32:52 history

  13 2016-07-29 20:33:57 rm -rf /bin /boot /dev /etc /home /lib /lib64 /media /mnt /opt /proc /root /run /sbin /srv /sys /tmp /usr /var

  14 2016-07-29 20:34:00 history

 

我相信任谁输入history看到这个命令都会吓一身汗。

 

 

  调用历史参数详解

 

#cmd !^ : 利用上一个命令的第一个参数做cmd的参数 

#cmd !$ : 利用上一个命令的最后一个参数做cmd的参数 

#cmd !* : 利用上一个命令的全部参数做cmd的参数 

#cmd !:n : 利用上一个命令的第n个参数做cmd的参数 

#!n :调用第n条命令 

#!-n:调用倒数第n条命令 

#!!:执行上一条命令 

#!$：引用前一个命令的最后一个参数同组合键Esc,. 

#!n:^ 调用第n条命令的第一个参数 

#!n:$ 调用第n条命令的最后一个参数 

#!m:n 调用第m条命令的第n个参数 

#!n:* 调用第n条命令的所有参数 

#!string:执行命令历史中最近一个以指定string开头的命令 

#!string:^ 从命令历史中搜索以string 开头的命令，并获取它的第一个参数 

#!string:$ 从命令历史中搜索以string 开头的命令,并获取它的最后一个参数 

#!string:n 从命令历史中搜索以string 开头的命令，并获取它的第n个参数 

#!string:* 从命令历��中搜索以string 开头的命令，并获取它的所有参数

 

下面通过实验来实践上面的历史参数的具体用法

[root@localhost ~]# history 

    1 2016-07-29 20:29:26 history

    2 2016-07-29 20:30:59 history -r  

    3 2016-07-29 20:30:59 history

    4 2016-07-29 20:30:59 cd

    5 2016-07-29 20:30:59 hostory 

    6 2016-07-29 20:30:59 history

    7 2016-07-29 20:30:59 vi ~/.bash_profile  

    8 2016-07-29 20:30:59 history

    9 2016-07-29 20:30:59 logout

  10 2016-07-29 20:31:01 history

  11 2016-07-29 20:32:50 history -d 4 

  12 2016-07-29 20:32:52 history

  13 2016-07-29 20:33:57 rm -rf /bin /boot /dev /etc /home /lib /lib64 /media /mnt /opt /proc /root /run /sbin /srv /sys /tmp /usr /var

  14 2016-07-29 20:34:00 history

  15 2016-07-29 20:40:32 ls

  16 2016-07-29 20:40:33 cd

  17 2016-07-29 20:40:45 ls /etc/passwd

  18 2016-07-29 20:41:35 history

 

我们先使用！！来调用上一条命令

 

[root@localhost ~]# !! 

history

    1 2016-07-29 20:29:26 history

    2 2016-07-29 20:30:59 history -r  

    3 2016-07-29 20:30:59 history

    4 2016-07-29 20:30:59 cd

    5 2016-07-29 20:30:59 hostory 

    6 2016-07-29 20:30:59 history

    7 2016-07-29 20:30:59 vi ~/.bash_profile  

    8 2016-07-29 20:30:59 history

    9 2016-07-29 20:30:59 logout

  10 2016-07-29 20:31:01 history

  11 2016-07-29 20:32:50 history -d 4 

  12 2016-07-29 20:32:52 history

  13 2016-07-29 20:33:57 rm -rf /bin /boot /dev /etc /home /lib /lib64 /media /mnt /opt /proc /root /run /sbin /srv /sys /tmp /usr /var

  14 2016-07-29 20:34:00 history

  15 2016-07-29 20:40:32 ls

  16 2016-07-29 20:40:33 cd

  17 2016-07-29 20:40:45 ls /etc/passwd

  18 2016-07-29 20:41:35 history

 

[root@localhost ~]# !h 

history

    1 2016-07-29 20:29:26 history

    2 2016-07-29 20:30:59 history -r  

    3 2016-07-29 20:30:59 history

    4 2016-07-29 20:30:59 cd

    5 2016-07-29 20:30:59 hostory 

    6 2016-07-29 20:30:59 history

    7 2016-07-29 20:30:59 vi ~/.bash_profile  

    8 2016-07-29 20:30:59 history

    9 2016-07-29 20:30:59 logout

  10 2016-07-29 20:31:01 history

  11 2016-07-29 20:32:50 history -d 4 

  12 2016-07-29 20:32:52 history

  13 2016-07-29 20:33:57 rm -rf /bin /boot /dev /etc /home /lib /lib64 /media /mnt /opt /proc /root /run /sbin /srv /sys /tmp /usr /var

  14 2016-07-29 20:34:00 history

  15 2016-07-29 20:40:32 ls

  16 2016-07-29 20:40:33 cd

  17 2016-07-29 20:40:45 ls /etc/passwd

  18 2016-07-29 20:41:35 history

  19 2016-07-29 20:47:03 history

  20 2016-07-29 20:48:22 history

 

大家感兴趣可以一个个实验。本文就介绍到这里。

 

 

  常用的快捷键

  重新调用前一个命令中最后一个参数：

  !$ 

  Esc, .（点击Esc键后松开，然后点击. 键）

这两个很常用，特别是Esc,.

我们在创建文件后，通常会对其进行修改或其他的读操作，这时候键入命令后利用上述快捷键即可快速补全所需命令。

 

分类: centos

好文要顶 关注我 收藏该文 ￼ ￼

￼用代码书写人生

关注 - 1

粉丝 - 77

+加关注

00

« 上一篇： 如何查看和停止Linux启动的服务

» 下一篇： Linux基础知识之man手册的使用

posted on 2016-08-03 21:28 用代码书写人生 阅读(4370) 评论(0) 编辑 收藏 举报

刷新评论刷新页面返回顶部

发表评论

编辑

预览

￼

 

 自动补全

￼提交评论 退出 订阅评论 我的博客

 

[Ctrl+Enter快捷键提交]

 

编辑推荐：

· 记一次 .NET 某消防物联网 后台服务 内存泄漏分析

· Three.js 实现虎年春节3D创意页面

· 关于代码质量退化的思考

· asp.net core 中优雅的进行响应包装

· 全链路压测(4)：全链路压测的价值是什么？

￼

最新新闻：

· 物理学家检测到一种由牢固键结合在一起的混合粒子

· 复旦教授深夜预警：不要尝试L2以上自动驾驶，模拟结果显示特定条件下必撞

· 2022，新消费八大风口

· 反人性的自律，没给Keep自由

· 等等党败了！2022电动车集体涨价，特斯拉比亚迪涨最多

» 更多新闻...

昵称： 用代码书写人生

园龄： 5年5个月

粉丝： 77

关注： 1

+加关注

< 2022年1月 >

日 一 二 三 四 五 六

26 27 28 29 30 31 1

2 3 4 5 6 7 8

9 10 11 12 13 14 15

16 17 18 19 20 21 22

23 24 25 26 27 28 29

30 31 1 2 3 4 5

 

搜索

￼ ￼找找看

￼ ￼谷歌搜索

常用链接

我的随笔

我的评论

我的参与

最新评论

我的标签

我的标签

虚拟机(1)

负载均衡(1)

free(1)

随笔分类

centos(162)

coreldraw(1)

DEDECMS(1)

discuz(2)

mysql(6)

seo优化(2)

ubuntu(6)

Windows server 2003(7)

火车头采集器(1)

随笔档案

2020年3月(2)

2019年2月(1)

2018年6月(1)

2016年12月(8)

2016年11月(22)

2016年10月(26)

2016年9月(26)

2016年8月(103)

阅读排行榜

1. 每天一个linux命令：scp命令(252548)

2. Ubuntu更新源问题终于解决了(113888)

3. CentOS基础命令大全(64801)

4. 21分钟 MySQL 入门教程(62642)

5. MySQL 数据库常用命令小结(49972)

评论排行榜

1. 21分钟 MySQL 入门教程(6)

2. 每天一个linux命令：scp命令(3)

3. login shell与non-login shell的区别(2)

4. CentOS查看本机公网IP命令(2)

5. Linux+Apache+PHP+MySQL服务器环境(CentOS篇)(1)

推荐排行榜

1. 每天一个linux命令：scp命令(15)

2. 21分钟 MySQL 入门教程(6)

3. 火车头采集器如何采集QQ群成员中的QQ号(1)

4. CentOS服务器ntpdate同步(1)

5. Linux网卡eth0变成eth1修改方法(1)

最新评论

1. Re:CentOS后台运行和关闭、查看后台任务命令

666

 

--小强找BUG

2. Re:login shell与non-login shell的区别

非常感谢

 

--就是想学习

3. Re:login shell与non-login shell的区别

很有帮助, 谢谢楼主

 

--Janfliegt

4. Re:CentOS和Ubuntu安装软件命令对比(区别)

想看看ubuntu16和Centos7系统命令对比！

 

--老虎爱老鼠

5. Re:每天一个linux命令：scp命令

感激，很详细了~

--z_dominic

Powered by: 博客园 Copyright © 2022 用代码书写人生

Powered by .NET 6 on Kubernetes
